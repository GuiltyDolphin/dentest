#+TITLE: Dentest

#+BEGIN_EXPORT html
<a href="https://doc.deno.land/https/deno.land/x/dentest/mod.ts"><img src="https://doc.deno.land/badge.svg" alt="deno doc"></a>
#+END_EXPORT

Testing framework for Deno.

* Documentation

The main entry point is [[./mod.ts][mod.ts]]. The full API documentation is
available at [[https://doc.deno.land/https/deno.land/x/dentest/mod.ts][doc.deno.land]].

** Usage

Dentest serves as a drop-in replacement for Deno tests, which
means you can use =deno test= to run tests as usual.

** Grouping tests

Dentest provides support for grouping tests using
=testGroup=. Only top-level tests need to be run using the
=runAsMain= method. The following example shows how to group
tests in this manner:

#+BEGIN_SRC typescript
  import {
      assertEquals,
      testGroup,
      Test
  } from 'https://deno.land/x/dentest/mod.ts'

  testGroup('booleans',
      new Test('true is true', () => assertEquals(true, true)),
      new Test('false is false', () => assertEquals(false, false)),
      testGroup('more boolean tests',
          new Test('not true is false', () => assertEquals(!true, false)),
          new Test('not false is true', () => assertEquals(!false, true)),
      ),
  ).runAsMain();
#+END_SRC

** Decorators

Various decorators are provided that allow you to use classes
to group tests. Classes decorated with test decorators can be
run using =runTests= from =src/decorators.ts=.

- =@after=

  Marks the method to be run after each test. If multiple
  methods have =@after= specified, then they are run in the
  order they are defined.

- =@before=

  Marks the method to be run before each test. If multiple
  methods have =@before= specified, then they are run in the
  order they are defined.

- =@skip=

  Marks the test for skipping (the test will not be run).

- =@subtest=

  Marks a method as a generator for subtests. The method
  should return a class with subtests contained within it.

- =@test=

  Marks the given method as a test method, which will be run
  as part of the test suite.

* Development

** Coverage

To generate code test coverage, make sure you have access to
the =genhtml= tool (e.g., via the [[https://aur.archlinux.org/packages/lcov/][lcov package on AUR]]), then
run =make coverage= in the top-level of the project.

** Testing

Run =make test= in the top-level of the project to run the
tests. If you need to see results for tests that passed, run
=make test_verbose= or =deno test= instead.
